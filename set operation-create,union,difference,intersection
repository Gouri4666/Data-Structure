#include<stdio.h>
#include<stdlib.h>

void printBitString(int bitSet[],int size)
{
	for(int i=0;i<size;i++)
	printf("%d ",bitSet[i]);
	printf("\n");
}

void printDecimalSet(int bitSet[],int size)
{
	printf("{ ");
	for(int i=0;i<size;i++)
	{
	if(bitSet[i]==1)
	printf("%d ",i);
	}
	printf(" }\n");
}

int main()
{
	int na,nb,maxElement=-1;

	printf("Enter na: ");
	scanf("%d",&na);
	printf("Enter Elements of set a: ");
	int *setAElements=(int *)malloc(na*(sizeof(int)));
	for(int i=0;i<na;i++)
	{
		scanf("%d",&setAElements[i]);
		if(setAElements[i]>maxElement)
		maxElement=setAElements[i];
	}

	printf("Enter nb: ");
	scanf("%d",&nb);
	printf("Enter Elements of set b: ");
	int *setBElements=(int *)malloc(nb*(sizeof(int)));
	for(int i=0;i<nb;i++)
	{
		scanf("%d",&setBElements[i]);
		if(setBElements[i]>maxElement)
		maxElement=setBElements[i];
	}

	int size=maxElement+1;
	int *bitA=(int *)calloc(size,sizeof(int));
	int *bitB=(int *)calloc(size,sizeof(int));
	int *bitIntersection=(int *)calloc(size,sizeof(int));
	int *bitUnion=(int *)calloc(size,sizeof(int));
	int *bitDifferrence=(int *)calloc(size,sizeof(int));
	
	for(int i=0;i<na;i++)
	bitA[setAElements[i]]=1;
	for(int i=0;i<nb;i++)
	bitB[setBElements[i]]=1;

	int ch,cont;
	do
	{
		printf("\n\tMENU\n\t1.display\n\t2.union\n\t3.intersection\n\t4.Difference\n");
		printf("Enter choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				{
					printf("Set A Elements: ");
					printDecimalSet(bitA,size);
					printf("Set A in bit string: ");
					printBitString(bitA,size);

					printf("Set B Elements: ");
					printDecimalSet(bitB,size);
					printf("Set B in bit string: ");
					printBitString(bitB,size);
					break;
				}
			case 2:
				{
					for(int i=0;i<size;i++)
					bitUnion[i]=bitA[i]|bitB[i];
					printf("Union Elements:");
					printDecimalSet(bitUnion,size);
					break;	
				}
			case 3:
				{
					for(int i=0;i<size;i++)
					bitIntersection[i]=bitA[i]&bitB[i];
					printf("Intersection Elements:");
					printDecimalSet(bitIntersection,size);	
					break;
				}
			case 4:
				{
					for(int i=0;i<size;i++)
					bitDifferrence[i]=bitA[i]&(~bitB[i]);
					printf("Difference Elements:");
					printDecimalSet(bitDifferrence,size);	
					break;
				}
			default:printf("Invalid ");
		}
	printf("1 or 0: ");
	scanf("%d",&cont);
	}
	while(cont==1);
	
	return 0;
}
